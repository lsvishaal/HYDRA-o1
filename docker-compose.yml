networks:
  hydra_network:
    driver: bridge

services:
  # ✅ Redis for real-time log ingestion
  redis:
    image: redis:latest
    container_name: hydra_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf  # Updated path
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - hydra_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 3


  # ✅ Flask Application (Generates logs)
  flask_app:
    build: ./flask_app
    container_name: hydra_flask_app
    ports:
      - "5000:5000"
    env_file:
      - ./flask_app/.env
    volumes:
      - ./logs:/var/log/hydra
    restart: unless-stopped
    networks:
      - hydra_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ Data Pipeline (Processes logs from Redis)
  data_pipeline:
    build: ./data_pipeline
    container_name: hydra_data_pipeline
    restart: unless-stopped
    networks:
      - hydra_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8000:8000"

  # ✅ Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hydra_prometheus
    restart: unless-stopped
    networks:
      - hydra_network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ Grafana for Visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: hydra_grafana
    restart: unless-stopped
    networks:
      - hydra_network
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ cAdvisor for Container Resource Monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: hydra_cadvisor
    restart: unless-stopped
    networks:
      - hydra_network
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  prometheus_data:
